// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Parky.Infrastructure.Context;

#nullable disable

namespace Parky.Infrastructure.Migrations
{
    [DbContext(typeof(ParkyDbContext))]
    [Migration("20251015160251_ChangeRowVersionToPostgre")]
    partial class ChangeRowVersionToPostgre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Parky.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from");

                    b.Property<int>("LotId")
                        .HasColumnType("integer")
                        .HasColumnName("lot_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.HasIndex("LotId", "From", "To")
                        .IsUnique()
                        .HasDatabaseName("ix_bookings_lot_id_from_to");

                    b.ToTable("bookings", null, t =>
                        {
                            t.HasCheckConstraint("CK_Booking_ValidRange", "\"from\" < \"to\"");
                        });
                });

            modelBuilder.Entity("Parky.Domain.Entities.ParkingLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_parking_lots");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_parking_lots_name");

                    b.ToTable("parking_lots", null, t =>
                        {
                            t.HasCheckConstraint("CK_ParkingLot_Capacity_Positive", "capacity >= 0");

                            t.HasCheckConstraint("CK_ParkingLot_Name_NotEmpty", "char_length(name) > 0");
                        });
                });

            modelBuilder.Entity("Parky.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "driverpassword",
                            Role = 0,
                            Username = "driver"
                        },
                        new
                        {
                            Id = 2,
                            Password = "ownerpassword",
                            Role = 1,
                            Username = "owner"
                        });
                });

            modelBuilder.Entity("Parky.Domain.Entities.Booking", b =>
                {
                    b.HasOne("Parky.Domain.Entities.ParkingLot", "Lot")
                        .WithMany("Bookings")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_parking_lots_lot_id");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Parky.Domain.Entities.ParkingLot", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
